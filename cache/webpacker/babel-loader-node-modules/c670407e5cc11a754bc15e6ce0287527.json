{"ast":null,"code":"var _jsxFileName = \"/Users/Rustam_Mukhamedov/Downloads/kittynews_frontend/app/javascript/packs/posts-show/posts-show.jsx\";\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query PostsPage {\\n    viewer {\\n      id\\n    }\\n    postsAll {\\n      id\\n      description\\n      title\\n      tagline\\n      url\\n      commentsCount\\n      user {\\n        name\\n      }\\n      makers {\\n        image\\n      }\\n      commenters {\\n        image\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nimport React, { useEffect, useState } from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from 'react-apollo';\nimport renderComponent from '../utils/renderComponent';\nimport { Header } from './components/Header';\nimport { List } from './components/List';\nimport { Comments } from './components/Comments';\nvar QUERY = gql(_templateObject());\n\nfunction PostsShow(_ref) {\n  var postId = _ref.postId;\n\n  var _useQuery = useQuery(QUERY),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      post = _useState2[0],\n      setPost = _useState2[1];\n\n  useEffect(function () {\n    if (data && !loading) {\n      setPost(data.postsAll.filter(function (item) {\n        return item.id == postId;\n      })[0]);\n    }\n  }, [data, loading]);\n  console.log(data);\n  console.log(post);\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Header, {\n    post: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Comments, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }));\n}\n\nrenderComponent(PostsShow);","map":{"version":3,"sources":["/Users/Rustam_Mukhamedov/Downloads/kittynews_frontend/app/javascript/packs/posts-show/posts-show.jsx"],"names":["React","useEffect","useState","gql","useQuery","renderComponent","Header","List","Comments","QUERY","PostsShow","postId","data","loading","error","post","setPost","postsAll","filter","item","id","console","log"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AAEA,SAASC,MAAT,QAAuB,qBAAvB;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,QAAT,QAAyB,uBAAzB;AAEA,IAAMC,KAAK,GAAGN,GAAH,mBAAX;;AAyBA,SAASO,SAAT,OAA+B;AAAA,MAAVC,MAAU,QAAVA,MAAU;;AAAA,kBACIP,QAAQ,CAACK,KAAD,CADZ;AAAA,MACrBG,IADqB,aACrBA,IADqB;AAAA,MACfC,OADe,aACfA,OADe;AAAA,MACNC,KADM,aACNA,KADM;;AAAA,kBAELZ,QAAQ,CAAC,IAAD,CAFH;AAAA;AAAA,MAEtBa,IAFsB;AAAA,MAEhBC,OAFgB;;AAI7Bf,EAAAA,SAAS,CAAC,YAAM;AACd,QAAGW,IAAI,IAAI,CAACC,OAAZ,EAAqB;AACnBG,MAAAA,OAAO,CAACJ,IAAI,CAACK,QAAL,CAAcC,MAAd,CAAqB,UAACC,IAAD;AAAA,eAAUA,IAAI,CAACC,EAAL,IAAWT,MAArB;AAAA,OAArB,EAAkD,CAAlD,CAAD,CAAP;AACD;AACF,GAJQ,EAIP,CAACC,IAAD,EAAMC,OAAN,CAJO,CAAT;AAMAQ,EAAAA,OAAO,CAACC,GAAR,CAAYV,IAAZ;AACAS,EAAAA,OAAO,CAACC,GAAR,CAAYP,IAAZ;;AAEA,MAAGF,OAAH,EAAY;AACV,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD;;AAED,sBACE,uDACE,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAEE,IAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF;AAOD;;AAEDV,eAAe,CAACK,SAAD,CAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from 'react-apollo';\nimport renderComponent from '../utils/renderComponent';\n\nimport { Header } from './components/Header';\nimport { List } from './components/List';\nimport { Comments } from './components/Comments';\n\nconst QUERY = gql`\n  query PostsPage {\n    viewer {\n      id\n    }\n    postsAll {\n      id\n      description\n      title\n      tagline\n      url\n      commentsCount\n      user {\n        name\n      }\n      makers {\n        image\n      }\n      commenters {\n        image\n      }\n    }\n  }\n`;\n\nfunction PostsShow({ postId }) {\n  const { data, loading, error } = useQuery(QUERY);\n  const [post, setPost] = useState(null);\n\n  useEffect(() => {\n    if(data && !loading) {\n      setPost(data.postsAll.filter((item) => item.id == postId)[0]);\n    }\n  },[data,loading]);\n\n  console.log(data);\n  console.log(post);\n\n  if(loading) {\n    return <div>Loading...</div>\n  }\n\n  return (\n    <>\n      <Header post={post} />\n      <List />\n      <Comments />\n    </>\n  );\n}\n\nrenderComponent(PostsShow);\n"]},"metadata":{},"sourceType":"module"}